version: '3.8'

services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: mycloud_production
      POSTGRES_USER: mycloud_user
      POSTGRES_PASSWORD: NewStrongPassword123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mycloud_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mycloud_user -d mycloud_production"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  web:
    build: .
    restart: always
    env_file:
      - .env
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./storage:/app/storage
      - ./frontend_build:/app/frontend_build
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mycloud_network
    command: >
      sh -c "
        echo '🔄 Waiting for database...' &&
        python manage.py migrate --noinput &&
        echo '📁 Collecting static files...' &&
        python manage.py collectstatic --noinput &&
        echo '🚀 Starting Gunicorn...' &&
        gunicorn mycloud.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 300 --access-logfile - --error-logfile -
      "

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./frontend_build:/app/frontend_build:ro
      - ./uploads:/app/uploads:ro
      - ./storage:/app/storage:ro
    depends_on:
      - web
    networks:
      - mycloud_network

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  mycloud_network:
    driver: bridge
