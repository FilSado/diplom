import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';

// –ú–æ–∫–∞–µ–º react-redux
const mockDispatch = jest.fn();
const mockUseSelector = jest.fn();

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: () => mockDispatch,
  useSelector: (selector) => mockUseSelector(selector),
  Provider: ({ children }) => <div data-testid="provider">{children}</div>
}));

// –ú–æ–∫–∞–µ–º filesSlice —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–π
jest.mock('../../store/filesSlice', () => ({
  uploadFiles: jest.fn(() => ({ type: 'files/uploadFiles', payload: {} })),
  fetchFiles: jest.fn(() => ({ type: 'files/fetchFiles', payload: {} })),
  deleteFile: jest.fn(() => ({ type: 'files/deleteFile', payload: {} })),
  clearError: jest.fn(() => ({ type: 'files/clearError' })),
  default: (state = { files: [], loading: false, error: null, uploadProgress: 0, loadingIds: [] }) => state
}));

// –ú–æ–∫–∞–µ–º @ant-design/icons
jest.mock('@ant-design/icons', () => ({
  InboxOutlined: () => <div data-testid="inbox-icon">üìÅ</div>,
  UploadOutlined: () => <div data-testid="upload-icon">‚¨ÜÔ∏è</div>,
  DeleteOutlined: () => <div data-testid="delete-icon">üóëÔ∏è</div>
}));

// –ú–æ–∫–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Ant Design
jest.mock('antd', () => {
  const React = require('react');
  
  const MockUpload = ({ children, fileList, onChange, customRequest, beforeUpload, showUploadList, ...props }) => (
    <div data-testid="upload" {...props}>{children}</div>
  );

  MockUpload.Dragger = ({ children, onDrop, accept, multiple, beforeUpload, className, disabled, style, ...props }) => (
    <div 
      data-testid="upload-dragger" 
      className={className}
      style={style}
      {...props}
      onClick={() => {
        const file = new File(['test'], 'test.txt', { type: 'text/plain' });
        if (beforeUpload && beforeUpload(file) !== false) {
          // –§–∞–π–ª –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É
        }
      }}
    >
      {children}
    </div>
  );

  return {
    Card: ({ title, children, ...props }) => (
      <div data-testid="upload-card" {...props}>
        <div data-testid="card-title">{title}</div>
        {children}
      </div>
    ),
    Space: ({ children, direction, size, ...props }) => (
      <div data-testid="space" data-direction={direction} data-size={size} {...props}>
        {children}
      </div>
    ),
    Typography: {
      Text: ({ children, strong, style, ...props }) => 
        strong ? (
          <strong style={style} {...props}>{children}</strong>
        ) : (
          <span style={style} {...props}>{children}</span>
        ),
      Title: ({ children, level, style, ...props }) => {
        const Tag = `h${level || 1}`;
        return <Tag style={style} {...props}>{children}</Tag>;
      }
    },
    Input: {
      TextArea: React.forwardRef(({ value, onChange, placeholder, rows, maxLength, showCount, disabled, ...props }, ref) => (
        <textarea 
          ref={ref}
          value={value}
          onChange={onChange}
          placeholder={placeholder}
          rows={rows}
          maxLength={maxLength}
          disabled={disabled}
          data-testid="comment-textarea"
          data-show-count={showCount}
          {...props} 
        />
      ))
    },
    Upload: MockUpload,
    Button: ({ children, loading, onClick, icon, size, disabled, ...props }) => (
      <button 
        disabled={loading || disabled} 
        onClick={onClick}
        data-testid="upload-button"
        data-size={size}
        {...props}
      >
        {icon}
        {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : children}
      </button>
    ),
    Alert: ({ message, description, type, showIcon, closable, style, ...props }) => (
      <div 
        data-testid={`alert-${type}`} 
        className={`alert-${type}`} 
        style={style} 
        {...props}
      >
        <div data-testid="alert-message">{message}</div>
        {description && <div data-testid="alert-description">{description}</div>}
      </div>
    ),
    Progress: ({ percent, status, strokeColor, ...props }) => (
      <div data-testid="progress" data-status={status} {...props}>
        <div>–ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}%</div>
      </div>
    ),
    message: {
      success: jest.fn(),
      error: jest.fn(),
      warning: jest.fn(),
      info: jest.fn()
    }
  };
});

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ü–û–°–õ–ï –≤—Å–µ—Ö –º–æ–∫–æ–≤
import FileUploadForm from '../FileUploadForm';
import { uploadFiles } from '../../store/filesSlice';

describe('FileUploadForm Component', () => {
  const mockStore = configureStore({
    reducer: {
      files: (state = { files: [], loading: false, error: null, uploadProgress: 0, loadingIds: [] }) => state
    }
  });

  // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è useSelector
  const defaultFilesState = {
    files: [],
    loading: false,
    error: null,
    uploadProgress: 0,
    loadingIds: []
  };

  beforeEach(() => {
    jest.clearAllMocks();
    mockDispatch.mockClear();
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    mockUseSelector.mockImplementation((selector) => selector({ files: defaultFilesState }));
  });

  const renderForm = (state = {}) => {
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ
    if (Object.keys(state).length > 0) {
      mockUseSelector.mockImplementation((selector) => selector({ 
        files: { ...defaultFilesState, ...state } 
      }));
    }

    return render(
      <Provider store={mockStore}>
        <FileUploadForm />
      </Provider>
    );
  };

  it('renders all elements', () => {
    renderForm();
    
    expect(screen.getByText('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤')).toBeInTheDocument();
    expect(screen.getByTestId('upload-dragger')).toBeInTheDocument();
    expect(screen.getByTestId('comment-textarea')).toBeInTheDocument();
    expect(screen.getByTestId('upload-button')).toBeInTheDocument();
    expect(screen.getByText('–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã')).toBeInTheDocument();
  });

  it('shows loading state', () => {
    renderForm({ loading: true });
    
    expect(screen.getByText('–ó–∞–≥—Ä—É–∑–∫–∞...')).toBeInTheDocument();
  });

  it('renders upload info', () => {
    renderForm();
    
    expect(screen.getByText('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤')).toBeInTheDocument();
    expect(screen.getByTestId('upload-dragger')).toBeInTheDocument();
    expect(screen.getByText('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ')).toBeInTheDocument();
  });

  it('shows error message when error exists', () => {
    renderForm({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞' });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è error alert
    expect(screen.getByTestId('alert-error')).toBeInTheDocument();
    expect(screen.getByText('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')).toBeInTheDocument();
    expect(screen.getByText('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞')).toBeInTheDocument();
  });

  it('calls uploadFiles when file is selected', () => {
    renderForm();
    
    const dragger = screen.getByTestId('upload-dragger');
    fireEvent.click(dragger);

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è uploadFiles —á–µ—Ä–µ–∑ beforeUpload
    expect(dragger).toBeInTheDocument();
  });

  it('renders progress when uploading', () => {
    renderForm({ uploadProgress: 50 });
    
    expect(screen.getByTestId('progress')).toBeInTheDocument();
    expect(screen.getByText('–ü—Ä–æ–≥—Ä–µ—Å—Å: 50%')).toBeInTheDocument();
  });

  it('disables upload button when loading', () => {
    renderForm({ loading: true });
    
    const uploadButton = screen.getByTestId('upload-button');
    expect(uploadButton).toBeDisabled();
  });

  it('allows to enter comment', () => {
    renderForm();
    
    const textarea = screen.getByTestId('comment-textarea');
    fireEvent.change(textarea, { target: { value: 'Test comment' } });
    
    expect(textarea).toBeInTheDocument();
  });

  it('shows file upload constraints', () => {
    renderForm();
    
    expect(screen.getByText('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 100MB')).toBeInTheDocument();
    expect(screen.getByText('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤')).toBeInTheDocument();
    expect(screen.getByText('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è drag & drop')).toBeInTheDocument();
  });

  it('shows info alert by default', () => {
    renderForm();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π alert –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    expect(screen.getByTestId('alert-info')).toBeInTheDocument();
    expect(screen.getByText('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ')).toBeInTheDocument();
  });

  it('does not show error alert when no error', () => {
    renderForm();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ error alert –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    expect(screen.queryByTestId('alert-error')).not.toBeInTheDocument();
  });

  it('shows both alerts when error exists', () => {
    renderForm({ error: 'Test error' });
    
    // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±–∞ alert - error –∏ info
    expect(screen.getByTestId('alert-error')).toBeInTheDocument();
    expect(screen.getByTestId('alert-info')).toBeInTheDocument();
  });
});
